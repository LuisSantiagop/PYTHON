import barcode
import os
import random
from barcode.writer import ImageWriter

# Carpeta para guardar los c√≥digos de barras como im√°genes
IMAGE_FOLDER = "barcodes_images"

# Crear carpeta de im√°genes si no existe
if not os.path.exists(IMAGE_FOLDER):
    os.makedirs(IMAGE_FOLDER)

# Funci√≥n para generar c√≥digos √∫nicos
def generate_unique_codes(count=80):
    new_codes = set()
    ean13 = barcode.get_barcode_class("ean13")

    while len(new_codes) < count:
        code = str(random.randint(10**11, 10**12 - 1))  # 12 d√≠gitos aleatorios
        new_codes.add(code)  # Sin verificar duplicados, ya que son nuevos c√≥digos siempre

    return list(new_codes)

# Crear c√≥digos de barras y guardarlos como im√°genes
def create_barcode_images(codes):
    image_files = []
    for code in codes:
        ean = barcode.get_barcode_class("ean13")
        ean_instance = ean(code, writer=ImageWriter())
        file_path = os.path.join(IMAGE_FOLDER, f"{code}.png")  # Ruta absoluta
        ean_instance.save(file_path)
        if os.path.exists(file_path):
            print(f"‚úÖ Imagen creada: {file_path}")
            image_files.append(file_path)
        else:
            print(f"‚ö†Ô∏è ERROR: No se cre√≥ la imagen {file_path}")
    return image_files

# Ejecutar el programa
codes = generate_unique_codes()
print(f"üìå {len(codes)} c√≥digos generados.")

images = create_barcode_images(codes)
if not images:
    print("‚ùå ERROR: No se generaron im√°genes. Revisa posibles problemas.")

# Limpiar im√°genes generadas al final de la ejecuci√≥n
print("üéâ Proceso de generaci√≥n completado. Las im√°genes est√°n en la carpeta:", IMAGE_FOLDER)
